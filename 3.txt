const baseUrl = 'http://localhost:3030/jsonstore/workout/';
 
const workoutInput = document.getElementById('workout');
const locationInput = document.getElementById('location');
const dateInput = document.getElementById('date');
const addWorkoutButton = document.getElementById('add-workout');
const editWorkoutButton = document.getElementById('edit-workout');
const loadWorkoutButton = document.getElementById('load-workout');
const listContainer = document.getElementById('list');
 
let editingId = null; // Stores the ID of the workout being edited.
 
loadWorkoutButton.addEventListener('click', loadWorkouts);
addWorkoutButton.addEventListener('click', addWorkout);
editWorkoutButton.addEventListener('click', editWorkout);
 
// Fetch and display all workouts
async function loadWorkouts() {
    listContainer.innerHTML = ''; // Clear the list
 
    try {
        const response = await fetch(baseUrl);
        const data = await response.json();
 
        Object.values(data).forEach(createWorkoutElement);
    } catch (error) {
        console.error('Failed to load workouts:', error);
    }
}
 
// Add a new workout
async function addWorkout() {
    const workout = workoutInput.value.trim();
    const location = locationInput.value.trim();
    const date = dateInput.value;
 
    if (!workout || !location || !date) {
        alert('All fields are required!');
        return;
    }
 
    try {
        await fetch(baseUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ workout, location, date }),
        });
 
        // Refresh the list
        loadWorkouts();
 
        // Clear input fields
        workoutInput.value = '';
        locationInput.value = '';
        dateInput.value = '';
    } catch (error) {
        console.error('Failed to add workout:', error);
    }
}
 
// Edit a workout
async function editWorkout() {
    const workout = workoutInput.value.trim();
    const location = locationInput.value.trim();
    const date = dateInput.value;
 
    if (!workout || !location || !date) {
        alert('All fields are required!');
        return;
    }
 
    try {
        await fetch(`${baseUrl}${editingId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ workout, location, date }),
        });
 
        // Refresh the list
        loadWorkouts();
 
        // Reset editing state
        editingId = null;
        editWorkoutButton.disabled = true;
        addWorkoutButton.disabled = false;
 
        // Clear input fields
        workoutInput.value = '';
        locationInput.value = '';
        dateInput.value = '';
    } catch (error) {
        console.error('Failed to edit workout:', error);
    }
}
 
// Delete a workout
async function deleteWorkout(id) {
    try {
        await fetch(`${baseUrl}${id}`, { method: 'DELETE' });
        loadWorkouts();
    } catch (error) {
        console.error('Failed to delete workout:', error);
    }
}
 
// Populate the form for editing a workout
function populateFormForEdit(workout, location, date, id) {
    workoutInput.value = workout;
    locationInput.value = location;
    dateInput.value = date;
 
    editingId = id;
    editWorkoutButton.disabled = false;
    addWorkoutButton.disabled = true;
}
 
// Create a workout element in the DOM
function createWorkoutElement({ workout, location, date, _id }) {
    const container = document.createElement('div');
    container.classList.add('container');
 
    const workoutName = document.createElement('h2');
    workoutName.textContent = workout;
 
    const workoutDate = document.createElement('h3');
    workoutDate.textContent = date;
 
    const workoutLocation = document.createElement('h3');
    workoutLocation.textContent = location;
 
    const buttonsContainer = document.createElement('div');
    buttonsContainer.id = 'buttons-container';
 
    const changeButton = document.createElement('button');
    changeButton.classList.add('change-btn');
    changeButton.textContent = 'Change';
    changeButton.addEventListener('click', () => populateFormForEdit(workout, location, date, _id));
 
    const deleteButton = document.createElement('button');
    deleteButton.classList.add('delete-btn');
    deleteButton.textContent = 'Delete';
    deleteButton.addEventListener('click', () => deleteWorkout(_id));
 
    buttonsContainer.appendChild(changeButton);
    buttonsContainer.appendChild(deleteButton);
 
    container.appendChild(workoutName);
    container.appendChild(workoutDate);
    container.appendChild(workoutLocation);
    container.appendChild(buttonsContainer);
 
    listContainer.appendChild(container);
}